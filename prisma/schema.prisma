// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id                    String          @id @default(cuid())
  name                  String
  userId                String
  zipCode               String          @default("")
  storeUrl              String          @default("")
  storeSuccessSaleUrl   String          @default("")
  storeCancelledSaleUrl String          @default("")
  billboards            Billboard[]     @relation("StoreToBillboard")
  categories            Category[]      @relation("StoreToCategory")
  sizes                 Size[]          @relation("StoreToSize")
  colors                Color[]         @relation("StoreToColor")
  products              Product[]       @relation("StoreToProduct")
  orders                Order[]         @relation("StoreToOrder")
  emailSettings         EmailSettings?

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model EmailSettings {
  id                              String    @id @default(cuid())
  storeId                         String    @unique
  store                           Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  from                            String    @default("")
  replyTo                         String    @default("")

  name                            String    @default("")
  officialName                    String    @default("")
  address                         String    @default("")
  logoUrl                         String    @default("")

  orderConfirmationSubject        String    @default("Recebemos seu pedido!")
  orderConfirmationTitle          String    @default("Recebemos seu pedido!")
  orderConfirmationSubtitle       String    @default("Quando o pagamento for processado voltaremos com mais informações.")
  orderConfirmationDescription    String    @default("")

  paymentConfirmationSubject      String    @default("O Pagamento foi aprovado!")
  paymentConfirmationTitle        String    @default("O Pagamento foi aprovado!")
  paymentConfirmationSubtitle     String    @default("Agora vamos enviar seu pedido. Em até dois dias úteis você receberá o código de rastreio.")
  paymentConfirmationDescription  String    @default("")

  shippingConfirmationSubject     String    @default("Seus produtos estão a caminho!")
  shippingConfirmationTitle       String    @default("Está a caminho!")
  shippingConfirmationSubtitle    String    @default("Seu pedido foi enviado!")
  shippingConfirmationDescription String    @default("")

  deliveryConfirmationSubject     String    @default("Seu pedido chegou!")
  deliveryConfirmationTitle       String    @default("Seu pedido chegou!")
  deliveryConfirmationSubtitle    String    @default("Esperamos que esteja tudo certo.")
  deliveryConfirmationDescription String    @default("Caso tenha algum problema no pedido, alguma dúvida ou sugestão por favor entre em contato com a gente!")

  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt

  @@index([storeId])
}

model Billboard {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  categories  Category[]

  imageUrl    String
  srcSet      String      @default("") @db.Text
  webpUrl     String      @default("")
  webpSrcSet  String      @default("") @db.Text
  originalUrl String      @default("")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  slug        String      @default("")
  products    Product[]   @relation("CategoryToProduct")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]   @relation("SizeToProduct")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]   @relation("ColorToProduct")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  slug        String      @default("")
  description String      @default("") @db.Text
  price       Int
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  images      Image[]     @relation("ProductToImage")
  orderItems  OrderItem[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String      @id @default(cuid())
  productId   String
  product     Product     @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  url         String
  srcSet      String      @default("") @db.Text
  webpUrl     String      @default("")
  webpSrcSet  String      @default("") @db.Text
  originalUrl String      @default("")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}

model Order {
  id                String      @id @default(cuid())
  code              Int         @unique
  storeId           String
  store             Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[]
  isPaid            Boolean     @default(false)
  archived          Boolean     @default(false)

  destination       String
  localidade        String
  logradouro        String
  bairro            String
  complemento       String
  numero            String
  uf                String
  shippingCost      Int
  deliveryDeadline  DateTime

  name              String
  surname           String
  cpf               String
  email             String
  phone             String

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String      @id @default(cuid())
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id])
  productId   String
  product     Product     @relation(fields: [productId], references: [id])
  quantity    Int
  price       Int

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([orderId])
  @@index([productId])
}